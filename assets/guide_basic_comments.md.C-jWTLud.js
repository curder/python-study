import{_ as s,c as a,o as i,a2 as n}from"./chunks/framework.Ck3lBW6i.js";const F=JSON.parse('{"title":"代码注释","description":"","frontmatter":{},"headers":[],"relativePath":"guide/basic/comments.md","filePath":"guide/basic/comments.md","lastUpdated":1723451690000}'),t={name:"guide/basic/comments.md"},l=n(`<h1 id="代码注释" tabindex="-1">代码注释 <a class="header-anchor" href="#代码注释" aria-label="Permalink to &quot;代码注释&quot;">​</a></h1><p>在 Python 中，代码注释用于解释代码的意图、描述函数的功能、标记待办事项等。</p><p>注释可以提高代码的可读性，使其他开发者（或将来的你）能够更容易理解代码的目的和实现。</p><p>Python 支持两种主要的注释方式：单行注释和多行注释。</p><h2 id="单行注释" tabindex="-1">单行注释 <a class="header-anchor" href="#单行注释" aria-label="Permalink to &quot;单行注释&quot;">​</a></h2><p>单行注释以 <code>#</code> 开头，<code>#</code> 后的所有内容都被视为注释，直到行尾为止。单行注释通常用于解释代码的某一行或块。</p><p><strong>示例：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># coding:uft-8  # 这里声明编码格式，默认为utf-8</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 这是另一个单行注释</span></span></code></pre></div><h2 id="多行注释" tabindex="-1">多行注释 <a class="header-anchor" href="#多行注释" aria-label="Permalink to &quot;多行注释&quot;">​</a></h2><p>Python 并没有专门的多行注释语法，但可以通过多行字符串（用三重引号 <code>&quot;&quot;&quot;</code> 或 <code>&#39;&#39;&#39;</code> 包围的字符串）来实现多行注释。</p><p>虽然这些多行字符串主要用于文档字符串（docstrings），它们也可以用作多行注释。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">这是一个多行注释的例子</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">可以用于注释多行内容</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">这是另一个多行注释的例子</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">可以用于注释多行内容</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span></span></code></pre></div><h2 id="文档字符串-docstrings" tabindex="-1">文档字符串（Docstrings） <a class="header-anchor" href="#文档字符串-docstrings" aria-label="Permalink to &quot;文档字符串（Docstrings）&quot;">​</a></h2><p>文档字符串是用于描述模块、类、函数或方法功能的字符串，它们位于定义的开头，并用三重引号包围。</p><p>它们不仅是注释的一种形式，还用于生成文档。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, b):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    返回两个数的和。</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    参数:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    a -- 第一个数</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    b -- 第二个数</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    返回:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    两个数的和</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span></span></code></pre></div><h2 id="注释的最佳实践" tabindex="-1">注释的最佳实践 <a class="header-anchor" href="#注释的最佳实践" aria-label="Permalink to &quot;注释的最佳实践&quot;">​</a></h2><ol><li><strong>保持简洁和相关</strong>：注释应简洁明了，直接解释代码的意图。避免过度注释或注释明显的内容。</li><li><strong>更新注释</strong>：代码修改时应同时更新注释，以保持注释与代码的同步。</li><li><strong>使用文档字符串</strong>：为模块、类、函数和方法编写文档字符串，以便生成文档并提供函数用途和参数说明。</li><li><strong>避免过多的注释</strong>：良好的代码应该尽可能自解释，避免过多的注释。注释应当补充解释，而不是代替清晰的代码。</li></ol><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li><strong>单行注释</strong>：以 <code>#</code> 开头，适用于简单解释和代码行注释。</li><li><strong>多行注释</strong>：使用三重引号包围的字符串，适用于长的解释或多行注释。</li><li><strong>文档字符串</strong>：用于描述模块、类、函数或方法的功能，通常放在定义的开头。</li></ul>`,20),e=[l];function p(h,o,k,r,d,c){return i(),a("div",null,e)}const u=s(t,[["render",p]]);export{F as __pageData,u as default};
