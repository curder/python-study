import{_ as s,c as i,o as a,a2 as t}from"./chunks/framework.Ck3lBW6i.js";const E=JSON.parse('{"title":"类","description":"","frontmatter":{},"headers":[],"relativePath":"guide/oop/class.md","filePath":"guide/oop/class.md","lastUpdated":1656052955000}'),e={name:"guide/oop/class.md"},n=t(`<h1 id="类" tabindex="-1">类 <a class="header-anchor" href="#类" aria-label="Permalink to &quot;类&quot;">​</a></h1><h2 id="类属性" tabindex="-1">类属性 <a class="header-anchor" href="#类属性" aria-label="Permalink to &quot;类属性&quot;">​</a></h2><p>类中方法外的变量称为类属性，被该类的所有对象所共享。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Student.name </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 访问类属性</span></span></code></pre></div><h2 id="类方法" tabindex="-1">类方法 <a class="header-anchor" href="#类方法" aria-label="Permalink to &quot;类方法&quot;">​</a></h2><p>使用 <code>@classmethod</code> 修饰的方法，使用类名直接访问的方法。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Student.callClassMethod()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 调用类方法</span></span></code></pre></div><h2 id="类的静态方法" tabindex="-1">类的静态方法 <a class="header-anchor" href="#类的静态方法" aria-label="Permalink to &quot;类的静态方法&quot;">​</a></h2><p>使用 <code>@staticmethod</code> 修饰的方法，使用类名直接方法的方法。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Student.callStaticMethod()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 调用类静态方法</span></span></code></pre></div><h2 id="object-类" tabindex="-1">object 类 <a class="header-anchor" href="#object-类" aria-label="Permalink to &quot;object 类&quot;">​</a></h2><ul><li>object 类是多有类的父类，因此所有类都有 object 类的属性和方法</li><li>内置函数 <code>dir()</code> 可以查看指定对象的所有属性</li><li>object 类有一个 <code>__str()</code> 方法，用于返回一个对于 &quot;对象的描述&quot;，对应于内置函数 <code>str()</code> 经常用于 <code>print()</code> 方法时候的输出格式化</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Student</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, name, age):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __str__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;I am </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{0}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, and my age is </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{1}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.format(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.age)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stu </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Student(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Curder&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stu)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># I am Curder, and my age is 18</span></span></code></pre></div>`,13),h=[n];function l(p,k,d,o,r,c){return a(),i("div",null,h)}const y=s(e,[["render",l]]);export{E as __pageData,y as default};
